buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'android-apt'


android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.recipe.roulette.app"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "1.0.0"
    }

    signingConfigs {
        release {
            storeFile file("..${File.separator}keystore${File.separator}keystore.jks")
            storePassword getLocalProperty('storePassword')
            keyAlias getLocalProperty('keyAlias')
            keyPassword getLocalProperty('keyPassword')

        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
            buildConfigField "String", "FOOD_2_FORK_API_KEY", getLocalProperty('food2ForkAPIKEY_PROD')
            buildConfigField "String", "REDDIT_CLIENT_ID", getLocalProperty('redditClientID_PROD')
            buildConfigField "String", "REDDIT_PASS", getLocalProperty('redditPass_PROD')
        }
        debug {
            //debug the obfuscation if needed
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            versionNameSuffix "_" + gitBranch() + "_" + getTimeStamp()
            buildConfigField "String", "FOOD_2_FORK_API_KEY", getLocalProperty('food2ForkAPIKEY_DEV')
            buildConfigField "String", "REDDIT_CLIENT_ID", getLocalProperty('redditClientID_DEV')
            buildConfigField "String", "REDDIT_PASS", getLocalProperty('redditPass_DEV')

        }
    }
}

def getLocalProperty(propertyName) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(propertyName, null)
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch
}

def getTimeStamp() {
    def date = new Date()
    def formattedDate = date.format('dd.MM.yyyy')
    return formattedDate
}

def releasePath = file("${rootDir}/apk-builds/")
def archiveBaseName = android.defaultConfig.applicationId + "-" + android.defaultConfig.versionCode + "-" + getTimeStamp()

android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        def build = variant.name.capitalize()
        def releaseBuildTask = tasks.create(name: "buildSignedAPK", type: Zip) {
            group 'Build'
            description "Build signed APK"
            destinationDir releasePath
            archiveName archiveBaseName + ".zip"
            from(variant.outputs.outputFile.path) {
                rename '.*', "${archiveBaseName}.apk"
            }
            if (variant.buildType.minifyEnabled) {
                from(variant.mappingFile.parent) {
                    include 'mapping.txt'
                    rename '(.*)', "${archiveBaseName}-\$1"
                }
            }
        }
        releaseBuildTask.dependsOn variant.assemble
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    /* Support */
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:design:24.2.0'
    compile 'com.android.support:percent:24.2.0'
    compile 'com.android.support:support-annotations:24.2.0'
    compile 'com.android.support:cardview-v7:24.2.0'
    compile 'com.android.support:recyclerview-v7:24.2.0'

    /* Retrofit 2.0 */
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.3.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.okio:okio:1.6.0'

    /* RxAndroid + RxJava */
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'

    /* ButterKnife */
    compile 'com.jakewharton:butterknife:8.1.0'
    apt 'com.jakewharton:butterknife-compiler:8.1.0'

    /* Dagger 2.0 */
    apt 'com.google.dagger:dagger-compiler:2.5'
    compile 'com.google.dagger:dagger:2.5'
    provided 'javax.annotation:jsr250-api:1.0'

    /* EventBus */
    compile 'org.greenrobot:eventbus:3.0.0'

    /* Glide - Image Loading */
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    compile 'jp.wasabeef:glide-transformations:2.0.1'

    /* Awesome Splash */
    compile 'com.github.ViksaaSkool:AwesomeSplash:v1.0.0'

    /* Animations */
    compile 'jp.wasabeef:recyclerview-animators:2.2.4'

    /* Crashlytics */
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }

    /* Parceler */
    compile 'org.parceler:parceler-api:1.1.1'
    apt 'org.parceler:parceler:1.1.1'

}
